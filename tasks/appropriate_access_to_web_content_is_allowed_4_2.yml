- name: Set Default
  ansible.builtin.set_fact:
    directory_compliance_status: "check failed"
    order_deny_allow_status: "check failed"
    require_method_status: "check failed"
    overall_status: "check failed"
    error_desc: ""


- name: Extract all <Directory> elements from Apache configuration files
  ansible.builtin.shell: |
    awk '/<Directory/,/<\/Directory/' {{ apache_conf_dir }}/conf/httpd.conf {{ apache_conf_dir }}/conf.d/*.conf
  register: directory_elements
  changed_when: false
  ignore_errors: yes


- name: Set error description
  ansible.builtin.set_fact:
    error_desc: "{{ directory_elements.stderr }}"
  when: directory_elements.rc != 0
  ignore_errors: yes


- name: Extract all <Location> elements from Apache configuration files
  ansible.builtin.shell: |
    awk '/<Location/,/<\/Location/' {{ apache_conf_dir }}/conf/httpd.conf {{ apache_conf_dir }}/conf.d/*.conf
  register: location_elements
  changed_when: false
  ignore_errors: yes


- name: Set error description
  ansible.builtin.set_fact:
    error_desc: "{{ error_desc }}         {{ location_elements.stderr }}"
  when: location_elements.rc != 0
  ignore_errors: yes


- name: Extract Allow directives from Apache configuration files
  ansible.builtin.shell: |
    grep -i -C 6 'Allow[[:space:]]from' {{ apache_conf_dir }}/conf/httpd.conf {{ apache_conf_dir }}/conf.d/*.conf
  register: allow_directives
  changed_when: false
  ignore_errors: yes

- name: Set error description
  ansible.builtin.set_fact:
    error_desc: "{{ error_desc }}         {{ allow_directives.stderr }}"
  when: allow_directives.rc != 0
  ignore_errors: yes

- name: Set directory compliance status based on extracted elements
  ansible.builtin.set_fact:
    directory_compliance_status: >-
      {%- if directory_elements.stdout | length > 0 -%}
        compliant
      {%- else -%}
        not compliant
      {%- endif -%}
  ignore_errors: yes


- name: Check for Order/Deny/Allow method in <Directory> elements
  ansible.builtin.shell: |
    echo "{{ directory_elements.stdout }}" | grep -E 'Order|Deny|Allow'
  register: order_deny_allow_output
  changed_when: false
  ignore_errors: yes


- name: Validate Order/Deny/Allow configuration
  ansible.builtin.set_fact:
    order_deny_allow_status: >-
      {%- if 'Order Deny,Allow' in order_deny_allow_output.stdout and
              'Deny from' in order_deny_allow_output.stdout -%}
        compliant
      {%- else -%}
        not compliant
      {%- endif -%}
  ignore_errors: yes


- name: Check for Require directives in <Directory> elements
  ansible.builtin.shell: |
    echo "{{ directory_elements.stdout }}" | grep -E 'Require'
  register: require_output
  changed_when: false
  ignore_errors: yes


- name: Validate Require method configuration
  ansible.builtin.set_fact:
    require_method_status: >-
      {%- if require_output.stdout | length > 0 and
              not ('Order' in order_deny_allow_output.stdout or 'Deny' in order_deny_allow_output.stdout) -%}
        compliant
      {%- else -%}
        not compliant
      {%- endif -%}
  ignore_errors: yes


- name: Determine overall compliance status
  ansible.builtin.set_fact:
    overall_status: >-
      {%- if require_method_status == 'compliant' and
              order_deny_allow_status == 'compliant' and
              directory_compliance_status == 'compliant' -%}
        compliant
      {%- else -%}
        not compliant
      {%- endif -%}
  ignore_errors: yes

      
- name: Append directory configuration compliance status to CSV file
  ansible.builtin.lineinfile:
    path: "{{ csv_file }}"
    create: yes
    line: "{{ inventory_hostname }},4.2,directory_configuration,{{ overall_status }}, {{ error_desc | trim }}"
  delegate_to: localhost

  